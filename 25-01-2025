#.2948. Make Lexicographically Smallest Array by Swapping Elements.

class Solution {
    public int[] lexicographicallySmallestArray(int[] nums, int limit) {
        int n = nums.length;
        int[] result = new int[n];
        
        // Store value and index pairs
        int[][] indexedNums = new int[n][2];
        for (int i = 0; i < n; i++) {
            indexedNums[i][0] = nums[i]; // Value
            indexedNums[i][1] = i;       // Original index
        }

        // Sort based on values
        Arrays.sort(indexedNums, (a, b) -> Integer.compare(a[0], b[0]));

        // Track connected components
        List<Integer> indices = new ArrayList<>();
        List<Integer> values = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            // Start a new component if needed
            if (!indices.isEmpty() && indexedNums[i][0] - indexedNums[i - 1][0] > limit) {
                // Sort component indices and values
                Collections.sort(indices);
                Collections.sort(values);
                
                // Assign sorted values to sorted indices
                for (int j = 0; j < indices.size(); j++) {
                    result[indices.get(j)] = values.get(j);
                }

                // Clear lists for new component
                indices.clear();
                values.clear();
            }
            indices.add(indexedNums[i][1]);
            values.add(indexedNums[i][0]);
        }

        // Process last component
        Collections.sort(indices);
        Collections.sort(values);
        for (int j = 0; j < indices.size(); j++) {
            result[indices.get(j)] = values.get(j);
        }

        return result;
    }
}
