#.684. Redundant Connection.
class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        int n = edges.length;
        
        // Initialize the parent and rank arrays
        int[] parent = new int[n + 1];
        int[] rank = new int[n + 1];
        
        // Initially, each node is its own parent
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
        }

        // Process each edge in the graph
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];

            // Find the root of u and v
            while (parent[u] != u) u = parent[u];
            while (parent[v] != v) v = parent[v];

            // If u and v have the same root, it means this edge creates a cycle
            if (u == v) {
                return edge;
            }

            // Union by rank
            if (rank[u] > rank[v]) {
                parent[v] = u;
            } else if (rank[u] < rank[v]) {
                parent[u] = v;
            } else {
                parent[v] = u;
                rank[u]++;
            }
        }
        
        return new int[0]; // No redundant edge found (should never happen with valid input)
    }
}
