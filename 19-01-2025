#.407. Trapping Rain Water II.

import java.util.PriorityQueue;

class Solution {
    public int trapRainWater(int[][] heightMap) {
        int m = heightMap.length, n = heightMap[0].length;
        if (m < 3 || n < 3) return 0; // No room to trap water

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[2] - b[2]); // Min heap
        boolean[][] visited = new boolean[m][n];

        // Add all boundary cells to the heap
        for (int i = 0; i < m; i++) {
            pq.offer(new int[]{i, 0, heightMap[i][0]});
            pq.offer(new int[]{i, n - 1, heightMap[i][n - 1]});
            visited[i][0] = visited[i][n - 1] = true;
        }
        for (int j = 1; j < n - 1; j++) {
            pq.offer(new int[]{0, j, heightMap[0][j]});
            pq.offer(new int[]{m - 1, j, heightMap[m - 1][j]});
            visited[0][j] = visited[m - 1][j] = true;
        }

        int water = 0;
        int[][] dirs = {{0,1}, {0,-1}, {1,0}, {-1,0}};
        int maxHeight = 0; // Track the global minimum boundary height

        while (!pq.isEmpty()) {
            int[] cell = pq.poll();
            int x = cell[0], y = cell[1], height = cell[2];

            maxHeight = Math.max(maxHeight, height); // Update boundary height

            for (int[] d : dirs) {
                int nx = x + d[0], ny = y + d[1];
                if (nx < 0 || ny < 0 || nx >= m || ny >= n || visited[nx][ny]) continue;

                // Water trapped depends on the difference between boundary height and current cell height
                if (heightMap[nx][ny] < maxHeight) {
                    water += maxHeight - heightMap[nx][ny];
                }

                pq.offer(new int[]{nx, ny, Math.max(maxHeight, heightMap[nx][ny])});
                visited[nx][ny] = true;
            }
        }

        return water;
    }
}
